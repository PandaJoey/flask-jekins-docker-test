#conftest

""" 
tempfile.mkstemp() creates and opens a temporary file, returning 
the file descriptor and the path to it. The DATABASE path is 
overridden so it points to this temporary path instead of the 
instance folder. After setting the path, the database tables are 
created and the test data is inserted. After the test is over, the 
temporary file is closed and removed.

TESTING tells Flask that the app is in test mode. Flask changes 
some internal behavior so its easier to test, and other extensions 
can also use the flag to make testing them easier.

The client fixture calls app.test_client() with the application 
object created by the app fixture. Tests will use the client to 
make requests to the application without running the server.

The runner fixture is similar to client. app.test_cli_runner() 
creates a runner that can call the Click commands registered with 
the application.

Pytest uses fixtures by matching their function names with the 
names of arguments in the test functions. For example, the 
test_hello function youll write next takes a client argument. 
Pytest matches that with the client fixture function, calls it, 
and passes the returned value to the test function.

For most of the views, a user needs to be logged in. The easiest 
way to do this in tests is to make a POST request to the login 
view with the client. Rather than writing that out every time, 
you can write a class with methods to do that, and use a fixture to pass it the client for each test.

With the auth fixture, you can call auth.login() in a test to log 
in as the test user, which was inserted as part of the test data 
in the app fixture.

The register view should render successfully on GET. On POST with 
valid form data, it should redirect to the login URL and the users 
data should be in the database. Invalid data should display error 
messages.

"""

#testdb


""" 
Within an application context, get_db should return the 
same connection each time its called. After the context, 
the connection should be closed.

The init-db command should call the init_db function and 
output a message.


This test uses Pytests monkeypatch fixture to replace the 
init_db function with one that records that its been called. 
The runner fixture you wrote above is used to call the init-db 
command by name.
"""

#test authy


""" 
client.get() makes a GET request and returns the Response object 
returned by Flask. Similarly, client.post() makes a POST request, 
converting the data dict into form data.

To test that the page renders successfully, a simple request is 
made and checked for a 200 OK status_code. If rendering failed, 
Flask would return a 500 Internal Server Error code.

headers will have a Location header with the login URL when the 
register view redirects to the login view.

data contains the body of the response as bytes. If you expect a 
certain value to render on the page, check that it’s in data. 
Bytes must be compared to bytes. If you want to compare text, use 
get_data(as_text=True) instead.

pytest.mark.parametrize tells Pytest to run the same test function 
with different arguments. You use it here to test different invalid 
input and error messages without writing the same code three times.

The tests for the login view are very similar to those for register.
Rather than testing the data in the database, session should have 
user_id set after logging in.

Using client in a with block allows accessing context variables 
such as session after the response is returned. Normally, 
accessing session outside of a request would raise an error.

Testing logout is the opposite of login. session should not 
contain user_id after logging out.

"""

#testblog

""" 
All the blog views use the auth fixture you wrote earlier. C
all auth.login() and subsequent requests from the client will 
be logged in as the test user.

The index view should display information about the post that 
was added with the test data. When logged in as the author, 
there should be a link to edit the post.

You can also test some more authentication behavior while 
testing the index view. When not logged in, each page shows 
links to log in or register. When logged in, theres a link 
to log out.

A user must be logged in to access the create, update, and 
delete views. The logged in user must be the author of the 
post to access update and delete, otherwise a 403 Forbidden 
status is returned. If a post with the given id doesnt exist, 
update and delete should return 404 Not Found.

The create and update views should render and return a 200 
OK status for a GET request. When valid data is sent in a POST 
request, create should insert the new post data into the database,
and update should modify the existing data. Both pages should show 
an error message on invalid data.

The delete view should redirect to the index URL and the post 
should no longer exist in the database.

"""

#sql

"""
In SQLite, data is stored in tables and columns. 
These need to be created before you can store and 
retrieve data. Flaskr will store users in the user
table, and posts in the post table. Create a file 
with the SQL commands needed to create empty tables:
"""

#register truncatechars_html
<!--
    {% extends 'base.html' %} tells Jinja that this template should 
    replace the blocks from the base template. All the rendered 
    content must appear inside {% block %} tags that override blocks 
    from the base template.
  
    A useful pattern used here is to place {% block title %} inside 
    {% block header %}. This will set the title block and then 
    output the value of it into the header block, so that both 
    the window and page share the same title without writing it 
    twice.
  -->

#base html

  <!--
    g is automatically available in templates. Based on if 
    g.user is set (from load_logged_in_user), either the 
    username and a log out link are displayed, or links to 
    register and log in are displayed. url_for() is also 
    automatically available, and is used to generate URLs 
    to views instead of writing them out manually.
    
    After the page title, and before the content, the template 
    loops over each message returned by get_flashed_messages(). 
    You used flash() in the views to show error messages, and 
    this is the code that will display them.
    
    There are three blocks defined here that will be overridden 
    in the other templates:
    
    % block title % will change the title displayed in the 
    browser’s tab and window title.
    
    % block header % is similar to title but will change the 
    title displayed on the page.
    
    % block content % is where the content of each page goes,
    such as the login form or a blog post.
    
    The base template is directly in the templates directory. 
    To keep the others organized, the templates for a blueprint 
    will be placed in a directory with the same name as the blueprint. 
    -->

    #update html
    <!--
        This template has two forms. The first posts the edited data to 
        the current page (/<id>/update). The other form contains only a 
          button and specifies an action attribute that posts to the 
          delete view instead. The button uses some JavaScript to show a 
          confirmation dialog before submitting.
      
          The pattern {{ request.form['title'] or post['title'] }} is 
          used to choose what data appears in the form. When the form 
          hasn’t been submitted, the original post data appears, but if 
          invalid form data was posted you want to display that so the 
          user can fix the error, so request.form is used instead. 
          request is another variable that’s automatically available 
          in templates.
      -->